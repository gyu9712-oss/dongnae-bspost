<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8" />
<title>Open-Meteo 날씨 지도 (동래 지역)</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<style>
html, body { height: 100%; margin: 0; }
#map { height: 100vh; }
.legend {
  position: absolute; z-index: 1000; right: 12px; bottom: 12px;
  background: rgba(255,255,255,.95); padding: 8px 10px; border-radius: 8px;
  font: 12px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
  box-shadow: 0 2px 10px rgba(0,0,0,.1); max-width: 240px;
}
.legend div { display: flex; align-items: center; gap: 6px; margin: 3px 0; }
.legend .sw { width: 10px; height: 10px; border-radius: 2px; display: inline-block; }
.badge { display:inline-block; padding:2px 8px; border-radius:10px; font-weight:600; color:#fff }
.muted { color:#666; font-size:12px }
pre { white-space: pre-wrap; margin: 6px 0 0; }
.toolbar {
  position:absolute; left:12px; top:12px; z-index:1000;
  background:rgba(255,255,255,.95); padding:8px 10px; border-radius:8px;
  box-shadow:0 2px 10px rgba(0,0,0,.1);
  font: 13px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
}
.toolbar button{ cursor:pointer; border:1px solid #e5e7eb; background:#fff; padding:6px 10px; border-radius:8px }
.extra {
  margin-top:8px; padding:8px; border-radius:8px; border:1px solid #f3d9a6; background:#fff7e6;
  font-size:12px; line-height:1.5;
}
.extra b { display:inline-block; margin-right:6px; }
</style>
</head>
<body>
<div id="map"></div>
<div class="toolbar">
  <button id="refreshBtn">↻ 새로고침</button>
  <span id="updated" class="muted" style="margin-left:8px">업데이트 대기…</span>
</div>
<div class="legend">
  <b>위험도</b>
  <div><span class="sw" style="background:#10b981"></span> 낮음</div>
  <div><span class="sw" style="background:#3b82f6"></span> 보통</div>
  <div><span class="sw" style="background:#f59e0b"></span> 주의</div>
  <div><span class="sw" style="background:#dc2626"></span> 경계</div>
  <div><span class="sw" style="background:#b91c1c"></span> 심각</div>
</div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
const KST = 'Asia/Seoul';
const FETCH_TIMEOUT_MS = 12000;
const OPEN_METEO = ({lat, lon}) =>
  `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}`
  + `&models=kma_seamless&current=temperature_2m,relative_humidity_2m,is_day,weather_code,rain,showers,snowfall,wind_speed_10m`
  + `&timezone=${encodeURIComponent(KST)}&windspeed_unit=ms`;

// ✅ 동래 지역만 표시
const cities = [
  { name: "동래", lat: 35.2089732, lon: 129.0819093 }
];

const sleep = (ms) => new Promise(r => setTimeout(r, ms));
const withTimeout = (p, ms) => Promise.race([p, new Promise((_, rej) => setTimeout(() => rej(new Error('timeout')), ms))]);
const fmt = (n, dp=0) => (n===undefined || n===null || Number.isNaN(n)) ? '-' : Number(n).toFixed(dp);
const nowStr = () => new Date().toLocaleString('ko-KR', { timeZone: KST });

// 날씨 코드 매핑
function weatherFromCode(code) {
  if (code === 0) return { main: "Clear", description: "맑음" };
  if ([1,2,3].includes(code)) return { main: "Clouds", description: code===1?"대체로 맑음": code===2?"부분 흐림":"흐림" };
  if ([45,48].includes(code)) return { main: "Fog", description: "안개/짙은 안개" };
  if ([51,53,55,56,57].includes(code)) return { main: "Drizzle", description: "이슬비/언 이슬비" };
  if ([61,63,65,66,67,80,81,82].includes(code)) return { main: "Rain", description: "비/소나기" };
  if ([71,73,75,77,85,86].includes(code)) return { main: "Snow", description: "눈/소낙눈" };
  if ([95,96,99].includes(code)) return { main: "Thunderstorm", description: "뇌우" };
  return { main: "Clouds", description: "흐림" };
}

function colorForLevel(level) {
  return level === "심각" ? "#b91c1c" :
         level === "경계" ? "#dc2626" :
         level === "주의" ? "#f59e0b" :
         level === "보통" ? "#3b82f6" : "#10b981";
}

// 추가 정보(요청 사항) 생성: 비/이슬비/뇌우일 때만 노출
function incidentInfo(main) {
  if (["Rain", "Drizzle", "Thunderstorm"].includes(main)) {
    return {
      count: 2,
      caseText: "빗길에 우편물을 배송하는 중, 이륜차와 함께 미끄러져 발목에 이륜차에 끼이는 사고 발생"
    };
  }
  return null;
}

function assessHazard({ main, tempC, windMs, rainMm, snowMm }) {
  let level = "보통";
  let type = main;
  let tips = [];
  const set = (lvl, typ, arr) => { level = lvl; type = typ; tips = arr.slice(); };

  if (main === "Thunderstorm") {
    set(rainMm > 10 ? "심각" : "경계", "뇌우/호우", [
      "강한 비·번개 시 운행 중지, 실내 대기",
      "지하차도·하천 인근 침수 도로 진입 금지",
      "시야 급감: 속도 30% 감속(비상등은 정차 시 사용)"
    ]);
  } else if (main === "Rain" || main === "Drizzle") {
    set(rainMm > 30 ? "심각" : rainMm > 10 ? "경계" : "주의", "비/젖은 노면", [
      "감속(평소 대비 20~30%), 제동거리 2배",
      "맨홀·도색·철판 위 통과 금지",
      "헬멧 김서림 방지, 방수 장갑 착용"
    ]);
  } else if (main === "Snow") {
    set(snowMm > 5 ? "경계" : "주의", "대설/결빙", [
      "블랙아이스 시간대 운행 자제",
      "급가감속 금지, 후륜 제동 낮추기",
      "방한 장비 착용"
    ]);
  } else if (main === "Clear") {
    if (tempC >= 35) {
      set("경계", "폭염", ["그늘 휴식·수분 보충", "통풍형 자켓 착용", "열질환 증상 시 즉시 중지"]);
    } else if (tempC >= 33) {
      set("주의", "폭염", ["그늘 휴식·수분 보충", "진한 색 장비 피하기"]);
    } else if (tempC <= -10) {
      set("경계", "한파", ["핸들워머/핫팩 사용", "교량 블랙아이스 주의"]);
    } else {
      set("낮음", "맑음", ["PPE(풀페이스 헬멧·장갑·부츠·보호대) 착용"]);
    }
  } else if (main === "Clouds") {
    set("보통", "구름/건조 노면", ["규정 속도 유지, 피로 시 휴식"]);
  } else if (main === "Fog") {
    set("주의", "안개/박무", ["저속 주행, 로우빔 사용", "차간거리 4초 이상 유지"]);
  }

  if (windMs >= 14) {
    const windLevel = windMs >= 20 ? "심각" : "경계";
    set(windLevel, "강풍/돌풍", [
      "교량·해안 등 횡풍 구간 회피",
      "대형차 추월 금지, 적재물 점검",
      "차체를 바람 방향으로 약간 기울이기"
    ]);
  }

  tips.push("공통: T-CLOCS 점검, PPE 착용, 차간거리 3~4초 유지");
  return { level, type, tips };
}

const map = L.map('map').setView([35.2089732, 129.0819093], 11);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '© OpenStreetMap contributors'
}).addTo(map);
const markerLayer = L.layerGroup().addTo(map);
const circleLayer = L.layerGroup().addTo(map);
const updatedEl = document.getElementById('updated');

function cityPopup({name, wc, temp, humidity, wind, rain, snow, hazard}) {
  const badge = `<span class="badge" style="background:${colorForLevel(hazard.level)}">${hazard.level}</span>`;
  const extra = incidentInfo(wc.main);
  const extraHtml = extra ? `
    <div class="extra">
      <div><b>⚠️ 추가 정보</b></div>
      <div><b>안전사고</b>: ${extra.count}건</div>
      <div><b>사고사례</b>: ${extra.caseText}</div>
    </div>` : "";

  return `
📍 <b>${name}</b><br/>
🌤️ 상태: ${wc.description}
<span style="display:inline-block;padding:2px 6px;border-radius:10px;border:1px solid #cfe;color:#456;background:#eef;margin-left:4px">${wc.main}</span><br/>
🌡️ 기온: <b>${fmt(temp,0)}°C</b> · 💧 습도: ${fmt(humidity,0)}% · 🌬️ 풍속: ${fmt(wind,1)} m/s<br/>
🌧️ 강수(현재): ${fmt(rain,1)} mm · ❄️ 적설(현재): ${fmt(snow,1)} mm<br/><br/>
<b>🛡️ 이륜차 예방책</b> ${badge}<br/>
상황 분류: <b>${hazard.type}</b>
<pre>${hazard.tips.map(t => `- ${t}`).join('\n')}</pre>
${extraHtml}
<div class="muted">* 데이터: Open-Meteo(kma_seamless) · 시간대: ${KST}</div>
`;
}

async function fetchCityWeather(city) {
  const url = OPEN_METEO(city);
  const res = await withTimeout(fetch(url), FETCH_TIMEOUT_MS);
  if (!res.ok) throw new Error(`Open-Meteo 오류: ${res.status}`);
  const data = await res.json();
  const cur = data.current || {};
  const wc = weatherFromCode(cur.weather_code ?? 3);
  const temp = cur.temperature_2m;
  const humidity = cur.relative_humidity_2m;
  const wind = cur.wind_speed_10m;
  const rain = Math.max(cur.rain ?? 0, cur.showers ?? 0);
  const snow = cur.snowfall ?? 0;
  const hazard = assessHazard({ main: wc.main, tempC: temp, windMs: wind, rainMm: rain, snowMm: snow });
  return { wc, temp, humidity, wind, rain, snow, hazard };
}

async function render() {
  markerLayer.clearLayers();
  circleLayer.clearLayers();
  updatedEl.textContent = '불러오는 중…';
  for (const city of cities) {
    try {
      const info = await fetchCityWeather(city);
      const marker = L.marker([city.lat, city.lon]).addTo(markerLayer);
      marker.bindPopup(cityPopup({ name: city.name, ...info }));
      const color = colorForLevel(info.hazard.level);
      L.circleMarker([city.lat, city.lon], { radius: 20, color, fillColor: color, fillOpacity: 0.3 }).addTo(circleLayer);
    } catch (e) {
      L.marker([city.lat, city.lon]).addTo(markerLayer)
        .bindPopup(`❌ <b>${city.name}</b><br/>날씨 정보를 불러올 수 없습니다.`);
      console.error(e);
    }
  }
  updatedEl.textContent = `업데이트: ${nowStr()}`;
}

document.getElementById('refreshBtn').addEventListener('click', render);
render();
</script>
</body>
</html>
